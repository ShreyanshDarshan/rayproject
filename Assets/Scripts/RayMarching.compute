#pragma kernel CSMain
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;
float2 _PixelOffset;

struct Node
{
	float4 boundary;
	int numpoints;
	int child[8];
	int level;
	int divided;
};

RWStructuredBuffer<Node> octree;

struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};
Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	return ray;
}
struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
};
RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	return hit;
}

void IntersectYPlane(Ray ray, inout RayHit bestHit, float3 center, float side)
{
	// Calculate distance along the ray where the ground plane is intersected
	float t = (center.y - ray.origin.y) / ray.direction.y;
	float3 hitSpot = ray.origin + t * ray.direction;
	float hitDist = max (abs(hitSpot.x - center.x), abs(hitSpot.z - center.z));
	if (t > 0 && t < bestHit.distance && hitDist < side/2)
	{
		bestHit.distance = t;
		bestHit.position = hitSpot;
		bestHit.normal = float3(0.0f, 1.0f, 0.0f);
	}
}

void IntersectZPlane(Ray ray, inout RayHit bestHit, float3 center, float side)
{
	// Calculate distance along the ray where the ground plane is intersected
	float t = (center.z - ray.origin.z) / ray.direction.z;
	float3 hitSpot = ray.origin + t * ray.direction;
	float hitDist = max(abs(hitSpot.x - center.x), abs(hitSpot.y - center.y));
	if (t > 0 && t < bestHit.distance && hitDist < side / 2)
	{
		bestHit.distance = t;
		bestHit.position = hitSpot;
		bestHit.normal = float3(0.0f, 0.0f, 1.0f);
	}
}

void IntersectXPlane(Ray ray, inout RayHit bestHit, float3 center, float side)
{
	// Calculate distance along the ray where the ground plane is intersected
	float t = (center.x - ray.origin.x) / ray.direction.x;
	float3 hitSpot = ray.origin + t * ray.direction;
	float hitDist = max(abs(hitSpot.z - center.z), abs(hitSpot.y - center.y));
	if (t > 0 && t < bestHit.distance && hitDist < side / 2)
	{
		bestHit.distance = t;
		bestHit.position = hitSpot;
		bestHit.normal = float3(1.0f, 0.0f, 0.0f);
	}
}

bool IntersectCheckYPlane(Ray ray, inout RayHit bestHit, float3 center, float side)
{
	// Calculate distance along the ray where the ground plane is intersected
	float t = (center.y - ray.origin.y) / ray.direction.y;
	float3 hitSpot = ray.origin + t * ray.direction;
	float hitDist = max(abs(hitSpot.x - center.x), abs(hitSpot.z - center.z));
	if (t > 0 && t < bestHit.distance && hitDist < side / 2)
	{
		return true;
	}
	return false;
}
bool IntersectCheckXPlane(Ray ray, inout RayHit bestHit, float3 center, float side)
{
	// Calculate distance along the ray where the ground plane is intersected
	float t = (center.x - ray.origin.x) / ray.direction.x;
	float3 hitSpot = ray.origin + t * ray.direction;
	float hitDist = max(abs(hitSpot.y - center.y), abs(hitSpot.z - center.z));
	if (t > 0 && t < bestHit.distance && hitDist < side / 2)
	{
		return true;
	}
	return false;
}
bool IntersectCheckZPlane(Ray ray, inout RayHit bestHit, float3 center, float side)
{
	// Calculate distance along the ray where the ground plane is intersected
	float t = (center.z - ray.origin.z) / ray.direction.z;
	float3 hitSpot = ray.origin + t * ray.direction;
	float hitDist = max(abs(hitSpot.x - center.x), abs(hitSpot.y - center.y));
	if (t > 0 && t < bestHit.distance && hitDist < side / 2)
	{
		return true;
	}
	return false;
}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
{
	// Calculate distance along the ray where the sphere is intersected
	float3 d = ray.origin - sphere.xyz;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
	if (p2sqr < 0)
		return;
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.xyz);
	}
}

void IntersectCube(Ray ray, inout RayHit bestHit, float3 center, float side)
{
	for (float i = -1; i <= 1; i++)
	{
		IntersectXPlane(ray, bestHit, center + float3(i * side / 2, 0.0f, 0.0f), side);
		IntersectYPlane(ray, bestHit, center + float3(0.0f, i * side / 2, 0.0f), side);
		IntersectZPlane(ray, bestHit, center + float3(0.0f, 0.0f, i * side / 2), side);
	}
}

bool IntersectCheckCube(Ray ray, inout RayHit bestHit, float3 center, float side)
{
	bool intersected = false;
	for (float i = -1; i <= 1; i++)
	{
		intersected = intersected || IntersectCheckXPlane(ray, bestHit, center + float3(i * side / 2, 0.0f, 0.0f), side);
		intersected = intersected || IntersectCheckYPlane(ray, bestHit, center + float3(0.0f, i * side / 2, 0.0f), side);
		intersected = intersected || IntersectCheckZPlane(ray, bestHit, center + float3(0.0f, 0.0f, i * side / 2), side);
	}
	return intersected;
}
//
void traverseOctree(Ray ray, inout RayHit bestHit)
{
	int num = 873;
	for (int i = 0; i < num; i++)
	{
		if (octree[i].level == 1 && octree[i].numpoints > 0)
		{
			IntersectCube(ray, bestHit, float3 (octree[i].boundary.x, octree[i].boundary.y, octree[i].boundary.z), octree[i].boundary.w*2);
		}
	}
}

/*
if (cur.level == 1)
		{
			IntersectCube(ray, bestHit, float3 (cur.boundary.x, cur.boundary.y, cur.boundary.z), cur.boundary.w);
		}
		else
		{
			for (int i = 0; i < 8; i++)
			{
				Node child = octree[cur.child[i]];
				if (IntersectCheckCube(ray, bestHit, float3 (child.boundary.x, child.boundary.y, child.boundary.z), child.boundary.w))
				{
					traverseOctree(ray, bestHit, child);
				}
			}
		}
*/

RayHit Trace(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	/*int num = octree[10].level;
	for (int i = 0; i < num; i++)
	{
		for (int j = 0; j < num-i; j++)
		{
			IntersectCube(ray, bestHit, float3 (j+i, j, i), 1);
		}
	}*/

	traverseOctree(ray, bestHit);

	/*for (float i = -1; i <= 1; i++)
	{
		IntersectXPlane(ray, bestHit, float3(1.0f + i, -1.0f, 1.0f), 2.0f);
		IntersectYPlane(ray, bestHit, float3(1.0f, -1.0f + i, 1.0f), 2.0f);
		IntersectZPlane(ray, bestHit, float3(1.0f, -1.0f, 1.0f + i), 2.0f);
	}*/
	//IntersectYPlane(ray, bestHit);
	// Add a floating unit sphere
	//IntersectSphere(ray, bestHit, float4(0, 3.0f, 0, 1.0f));
	return bestHit;
}

//float3 Shade(inout Ray ray, RayHit hit)
//{
//	if (hit.distance < 1.#INF)
//	{
//		float3 specular = float3(0.6f, 0.6f, 0.6f);
//		// Reflect the ray and multiply energy with specular reflection
//		ray.origin = hit.position + hit.normal * 0.001f;
//		ray.direction = reflect(ray.direction, hit.normal);
//		ray.energy *= specular;
//		// Return nothing
//		return float3(0.0f, 0.0f, 0.0f);
//	}
//	else
//	{
//		// Erase the ray's energy - the sky doesn't reflect anything
//		ray.energy = 0.0f;
//		// Sample the skybox and write it
//		float theta = acos(ray.direction.y) / -PI;
//		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
//		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
//	}
//}

float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{
		// Return the normal
		return hit.normal * 0.5f + 0.5f;
	}
	else
	{
		// Sample the skybox and write it
		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
	}
}

Ray CreateCameraRay(float2 uv)
{
	// Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	// Invert the perspective projection of the view-space position
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
	// Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);
	return CreateRay(origin, direction);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// Get the dimensions of the RenderTexture
	uint width, height;
	Result.GetDimensions(width, height);
	// Transform pixel to [-1,1] range
	//float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for the UVs
	Ray ray = CreateCameraRay(uv);
	// Write some colors

	/*
		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		Result[id.xy] = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);
	*/

	//Result[id.xy] = float4(ray.direction * 0.5f + 0.5f, 1.0f);


	// Trace and shade
	RayHit hit = Trace(ray);
	float3 result = Shade(ray, hit);
	Result[id.xy] = float4(result, 1);

	// Trace and shade
	/*float3 result = float3(0, 0, 0);
	for (int i = 0; i < 8; i++)
	{
		RayHit hit = Trace(ray);
		result += ray.energy * Shade(ray, hit);
		if (!any(ray.energy))
			break;
	}*/
}